"""1

Revision ID: ab674469eccc
Revises: 
Create Date: 2023-09-11 17:34:30.995680

"""
from alembic import op
import sqlalchemy as sa
import geoalchemy2
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "ab674469eccc"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "interest",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.Column("icon", sa.Text(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="core",
    )
    op.create_table(
        "user",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("tg_id", sa.Integer(), nullable=True),
        sa.Column("tg_username", sa.String(length=32), nullable=True),
        sa.Column("tg_first_name", sa.String(length=32), nullable=True),
        sa.Column("tg_last_name", sa.String(), nullable=True),
        sa.Column("tg_is_premium", sa.Boolean(), nullable=True),
        sa.Column("tg_language_code", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("tg_id"),
        sa.UniqueConstraint("tg_username"),
        schema="core",
    )
    op.create_table(
        "profile",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("owner_id", sa.UUID(), nullable=False),
        sa.Column("name", sa.String(length=32), nullable=False),
        sa.Column("bio", sa.String(length=600), nullable=True),
        sa.Column("birthdate", sa.Date(), nullable=False),
        sa.Column(
            "gender",
            postgresql.ENUM("male", "female", name="genderenum", schema="core"),
            nullable=False,
        ),
        sa.Column(
            "location",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["core.user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_table(
        "refresh_token",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user", sa.UUID(), nullable=False),
        sa.Column("value", sa.String(), nullable=False),
        sa.Column("user_agent", sa.String(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user"],
            ["core.user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_table(
        "filter",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column(
            "looking_gender",
            postgresql.ENUM(
                "nevermind", "male", "female", name="lookinggenderenum", schema="core"
            ),
            nullable=False,
        ),
        sa.Column("age_from", sa.Integer(), nullable=False),
        sa.Column("age_to", sa.Integer(), nullable=False),
        sa.Column("max_distance", sa.Integer(), nullable=False),
        sa.Column("profile_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["profile_id"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_table(
        "like",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("source_profile", sa.UUID(), nullable=False),
        sa.Column("target_profile", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_profile"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["target_profile"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_table(
        "match",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("profile_1", sa.UUID(), nullable=False),
        sa.Column("profile_2", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["profile_1"], ["core.profile.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["profile_2"], ["core.profile.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_table(
        "photo",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("profile_id", sa.UUID(), nullable=False),
        sa.Column("displaying_order", sa.Integer(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM(
                "approved",
                "processing",
                "rejected",
                name="photoprocessstatusenum",
                schema="core",
            ),
            nullable=False,
        ),
        sa.Column("status_description", sa.String(length=32), nullable=True),
        sa.Column("hash", sa.String(length=32), nullable=False),
        sa.Column("url", sa.String(length=512), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["profile_id"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("url"),
        schema="core",
    )
    op.create_table(
        "profile_interests",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("profile_id", sa.Uuid(), nullable=False),
        sa.Column("interest_id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["interest_id"], ["core.interest.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["profile_id"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_table(
        "save",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("profile_id", sa.UUID(), nullable=False),
        sa.Column("saved_profile_id", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["profile_id"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["saved_profile_id"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    op.create_table(
        "skip",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("source_profile", sa.UUID(), nullable=False),
        sa.Column("target_profile", sa.UUID(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["source_profile"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["target_profile"], ["core.profile.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="core",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("skip", schema="core")
    op.drop_table("save", schema="core")
    op.drop_table("profile_interests", schema="core")
    op.drop_table("photo", schema="core")
    op.drop_table("match", schema="core")
    op.drop_table("like", schema="core")
    op.drop_table("filter", schema="core")
    op.drop_table("refresh_token", schema="core")
    op.drop_index(
        "idx_profile_location",
        table_name="profile",
        schema="core",
        postgresql_using="gist",
    )
    op.drop_table("profile", schema="core")
    op.drop_table("user", schema="core")
    op.drop_table("interest", schema="core")
    # ### end Alembic commands ###
